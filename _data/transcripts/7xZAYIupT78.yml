---
0: Thank you.
7: Sorry, I'm going to be coughing lots because I seem to be, I've come down with
  a cold like
15: a day before, so instead of being the person who gets infected by someone on the
  plane,
19: I'm now the person who's like given 400 people the same thing that I've got.
23: Can you hear me in the back?
26: Am I loud enough or do you need a microphone?
28: Okay, cool.
30: Great, so I'm going to talk to you today about managing a healthy GitHub community.
35: Although it's worth kind of mentioning, it occurred to me after submitting the
  talk that
39: like pretty much everything I'm going to say is valid, whether your open source
  community
43: is on GitHub entirely or not at all or whatever, whatever level in between.
48: I think these principles can kind of apply regardless.
51: So I come to you today wearing like two different hats at once.
55: So I'm a maintainer on homebrew.
58: Does anyone, I see a few Macs in here.
60: Does anyone use homebrew at all?
62: Yeah, cool.
63: Hopefully some of you like it.
65: Basically, I've been a homebrew maintainer for, I guess, almost seven years now,
  a lot
71: longer than I've been at GitHub.
72: And I'm like now the kind of longest running homebrew maintainer, possibly the
  oldest one
78: as well, which is a little bit sad.
79: But then as of like two and a half years ago, I'm also working GitHub on their
  API team.
85: So I think like sometimes these two roles can kind of collide with each other
  and it's kind
92: of difficult sometimes to give people advice about open source in a way that is
  being kind
97: of both helpful but doesn't, you know, criticize the great work my co-workers
  are doing that
102: I might think I could do better sometimes.
104: And I'm sure they think exactly the same thing about my work.
106: So hopefully I'll be able to kind of give you some sort of understanding of some
  of the
111: things I've learned through maintaining homebrew and being at GitHub on the best
  way of kind
116: of managing that.
117: Oh, so as well, does anyone in here use GitHub?
119: Cool.
121: Hopefully you like it as well.
123: Right.
124: So most open source projects start out like this, right?
128: There's one person alone in your bedroom or your office or whatever just like
  working on
134: a project by yourself.
136: So how many people in here would say like there's an open source project that
  you maybe
140: run where you're the only maintainer, like you're the only person working on
  the project
144: and maybe no one else is working on it except for you?
146: Anyone?
148: Yeah, yeah, a few people.
150: Right, no one wants to put up their hand because everyone wants to be like a
  big successful
154: open source project.
155: And then when you become a big successful open source project, you understand
  that actually
160: that's maybe not the best thing because you have to deal with lots of complex
  things.
164: Right, so when your project's like small and you're the only person working on
  it, it's
168: kind of fairly easy to kind of scale.
170: It's fairly easy to work on it.
171: You've probably built it for some sort of purpose you have in mind.
175: Quite possibly you're kind of scratching your own itch.
177: And then that makes it like easy for you to kind of work out maybe what you're
  going to
181: do next and stuff like that.
182: What users kind of come along will tend to be kind of fairly sporadic and if
  they are
187: kind of vocal generally in the relatively early days, people tend to be fairly
  kind, which
191: is nice.
192: So then maybe a few years later or whatever, your project gets a bit of popularity
  and it
197: starts to look a little bit more like this.
199: So you've got like a few people who are kind of using it.
202: You maybe have a few people who are working on it.
203: Maybe no one else is working on it kind of as much as you, but you've kind of
  had some
208: contributions from other people and stuff like that.
209: Like I would say this is kind of, you know, maybe a medium-sized open source
  project.
213: If you have kind of less than 10 people kind of in, say, a given month who are
  sort of actively
219: working as kind of maintainers or like active contributors on your project.
223: And this is when you start to see kind of community issues kind of coming up.
228: But when it gets really interesting is when your project starts to look a bit
  more like
230: this.
231: When you start having huge numbers of people who are kind of using your project,
  a lot of
235: people are very vocal about changes that are made in your project.
238: And you have like more and more people who are kind of wanting to contribute.
241: So that's when like the principles I'm going to kind of talk about today, that's
  when they
246: really come in particularly relevant.
247: But I think all of this stuff is great for kind of building a community right
  from day one
252: when you kind of open, when you're open sourcing like your code for the first
  time, thinking
257: about like, okay, as this project grows, what do I want the growth of this project
  to be
262: like, and how do I want people in this project to interact with each other?
265: So the way I found easiest to sort of think about this is splitting the people
  who kind
271: of you interact with in your project into three groups, basically.
274: So people may be in more than one of these groups, but for the moment we'll pretend
  that
280: they're kind of segmented groups and completely independent.
284: So these groups are the maintainers.
286: So by this, I basically mean someone who is contributing code in some form to
  your project.
292: Depending on how you manage your project, that person may or may not have commit
  access.
297: That person may or may not be employed by a company, employed by you, you check
  their work,
302: whatever.
303: Like it's like there's lots of different ways of doing this.
306: But I'm broadly talking about people who are kind of actually writing code that
  ends up
310: going into your project here.
311: And the next group is vocal users, and I'm differentiating them from quiet users
  by these
320: are the people you hear about, particularly as your project gets bigger.
322: These are the people who they create issues.
325: They talk about you on Twitter.
327: They may or may not say nice things about you.
330: They may or may not recommend the project to their friends and write blog posts
  about how
334: how to use your project or why your project sucks or whatever.
337: But these are also generally the people who are kind of living in IRC channels,
  mailing lists,
343: stuff like that for your project.
344: And then the third group is the quiet users.
347: And I think it's important to remember this group because quite often in open
  source, they
351: can get forgotten about.
352: Because these are the people who, you know, they downloaded your software a while
  ago.
356: They're running it on their machines.
358: You know, if they're on, for example, a Linux machine, they might be something
  that AppGet
363: installed and they have no contact with your project at all.
365: They have no idea who you are.
366: They might not even really know your project's name.
368: But these are often, with most non-terrible pieces of software, like this is
  going to
376: be your biggest group, particularly as your project grows, particularly as your
  project
380: becomes more mature.
381: And I think it's this group that it's very important to kind of consider while
  you're
385: planning what your project should be doing.
387: So I'll talk more about this.
389: I'm going to break out each group and then talk about things which I think the
  top three
394: things that each group you can kind of do to foster that group and the things
  they care
399: about.
400: So, firstly, you're kind of maintainers.
403: So while all of these three groups are pretty important, obviously without maintainers,
  depending
409: on what type of software you have, without your maintainers, your software will
  probably
413: end up dying eventually.
414: Because if your software is not receiving any bug fixes, any security updates,
  any new
418: features, then depending on the software, it may end up dying.
423: In Homebrew's case, as a package manager, people are relying on us to kind of,
  on a day-to-day
428: basis, continually kind of add new versions of software and stuff like that and
  keep things
432: up to date for them.
434: So if we all, all the maintainers just disappeared off the project and never
  worked on it anymore,
438: then what would happen is people would find Homebrew's out of date, they would
  never get
443: updated, and then they would move on to something else.
445: So personally, and this is maybe contentious, but I think the maintainers are
  not the most important
451: people in the project.
452: But if you're a maintainer, they're maybe the most important people for you to
  focus
456: on, because those are the people who, like, over time, they're going to come
  and go, and
461: those are the people where you really need to make sure that you have them to
  keep your
464: So the three things I think are nice for maintainers.
468: The first thing, getting talked about more and more now, but it's code of conduct.
472: So Homebrew's had one since the relatively early days.
475: FOSS Asia has one for this conference.
477: But basically, just, like, a description of what is acceptable and unacceptable
  behavior
482: Like, most of the time, this stuff doesn't need to be kind of hard.
486: It doesn't need to be complicated.
487: And it's, you know, some people say, oh, can you not just tell people to be nice
  to each
491: other?
492: And it's like, well, yeah, that's part of it.
493: But, you know, that doesn't always come obvious to people.
497: And particularly with maintainers, who are often working on open source in their
  free time,
501: if every time I interact with my open source project that I'm working on, I get
  abused by
507: people, I don't want to work on that anymore, right?
508: I'm going to go play with my dog or something else fun that doesn't involve me
  getting abused.
513: So personally, I think a code of conduct is really helpful towards that, because
  we found
517: on Homebrew, like 99% of the time, if someone is rude, if someone is abusive,
  if you point
522: into a code of conduct and say, hey, can you read our code of conduct and just
  try and be
526: a little bit nicer in the future, then most of the time people will just apologize
  and
531: then we all move on and that's fine.
533: And then in the minority of cases where people don't, then you need to question,
  like,
536: whether that person's contributions to the project outweigh the kind of negative
  they're
541: So we found in Homebrew, another thing that doesn't get talked about very often,
  but something
546: that's really helped us as maintainers, is having a private chat.
549: So beyond IRC, having some sort of way of communicating amongst just the maintainers,
  maybe, about, particularly
557: around code of conduct issues, for example.
560: The maintainers want to be able to talk to each other and discuss and kind of
  interact.
564: And also, like, you know, if you like the people you work with on a project,
  then you're going
569: to probably want to spend more time talking to those people and more time working
  on that
573: So, you know, stuff like me saying to the Homebrew maintainers, hey, like, I'm
  going, I'm going
578: to be doing a conference and then I'm going to Indonesia on holiday.
582: And just bear in mind, I'm not going to be committing for a while.
584: Like, that's, I don't really want to post that on a public mail list.
587: That feels kind of weird.
588: But yet, it's kind of nice to be able to discuss that with people and have them
  say, oh, you
592: know, have a nice holiday and ask about it when I'm back or whatever.
594: And those kind of bonds between maintainers are, I think, what helps keep your
  project strong.
600: And I alluded to this a little bit earlier, but I think with maintainers, you
  need to
604: always try and keep your project growing.
605: One of my, what I consider almost my primary responsibility on Homebrew now is
  just trying
610: to find people who are kind of contributing to Homebrew and trying to encourage
  them, trying
614: to get them kind of get people so that they either have commit access or so that
  they're
619: kind of working towards getting to a place where they can get commit access to
  the project.
623: Because, you know, not everyone's going to work on open source forever.
627: As I said, I'm kind of the longest running Homebrew maintainer, but there's been
  a bunch
630: of others who've kind of come, done great work for a few years, and then for
  whatever
634: reason, they've kind of left the project.
636: You know, sometimes it's just they have less free time.
638: Sometimes there's another project that interests them now.
641: And that's kind of inevitable.
642: So if you want to keep your project going, you want the maintainers to kind of
  keep
646: maintaining the project, you're going to need to make sure you keep having more
648: and more maintainers.
649: So on the next category of people, vocal users.
656: So vocal users are like a great bunch because generally they're so excited about
  your project
663: that they just want to talk.
664: They want to talk lots and lots.
665: They may want to go on your issue tracker, on your mailing list, on your IRC
  channel and
669: just talk and talk and talk.
670: And when something's great in your project, they'll tell everyone how great it
  is.
673: When something's bad, they'll tell everyone how bad it is.
675: And like that enthusiasm is really valuable.
678: But there's a few things that kind of negative things you need to sometimes keep
  in check
682: with those types of users.
683: The first one is trying to stop bike shedding.
686: I don't know if, are people familiar with what the term bike shedding means?
689: Okay, some people, not everyone.
691: So bike shedding is the idea that, you know, if you maybe say to a few, you know,
  if you
696: work in an engineering lab or whatever and you say, okay, we're going to build
  the next
700: superconductor or whatever.
703: Does anyone have any thoughts on how that should be done?
705: Then, like, that's a really expert level thing and people are like, oh, I don't
  really know.
709: Whereas if you say, okay, well, we're going to build a bike shed or we're going
  to paint
712: the bike shed a certain color.
714: What do people think?
715: Then everyone has an opinion and everyone will come in and say, you know, I think
  it should
719: be, it should definitely be red.
720: Oh no, it can't be red.
721: It should definitely be blue.
722: And like, basically when things have a low barrier of entry like that, like you
  can get a
727: lot of people expressing very strong opinions on a topic, which is actually really
731: disruptive a lot of the time.
733: It doesn't help.
734: And particularly with this, it's worth remembering, as I mentioned before, you
  have your quiet users
739: who are not participating in this process.
740: So if you kind of encourage everything to be a big discussion amongst the people
  who aren't
746: working on your project, then often you can end up with kind of skewed ideas
  of how best
752: to actually solve problems and it can be difficult for maintainers to communicate
  with each other.
758: On the flip side, like a mailing list or RSC channel is like invaluable.
763: You know, as I said before, vocal users, they want to talk about your project
  and they want
766: to interact with each other.
767: And as a result, a really good way of doing that is having channels where you
  say to them,
772: you know, here are places where you can talk about the project.
775: You can talk about more or less whatever you want.
777: You can help each other.
778: You can discuss and things like that.
780: And that can be a really useful avenue for those people to kind of feel like
  they are
784: valued members of your community, whilst at the same time trying to keep development
  spaces
790: focused on development.
791: In Homebrew, we found this quite useful to try and push people from the issue
  tracker
796: and pull requests when kind of having some of these more off-topic discussions
  to the mailing
801: list or IRC and then these conversations can go on there instead.
804: And finally, and this might be a bit contentious, like I would say closing feature
  requests.
811: So another thing that's quite common if you have a lot of vocal users is people
  will express
815: a lot of views on, you know, it would be great if your project did this, it would
  be great
818: if your project did that.
819: And what happens a lot of the time with kind of projects that have been around
  for a while
823: is their bug trackers end up, 50% of the issues in there are people filing new
  feature
828: requests and saying, wouldn't it be great if like Apache, as well as being a
  web server,
832: could also like, you know, have an email client or something like that as well.
836: And for some of these things, like some projects are great at this, some projects
  are really
841: I think Homebrew is somewhere in the middle, I think we're fairly good.
844: I think it's very important as a project maintainer to when there's stuff that
  people
849: submit, which you know immediately, your immediate reaction is we are never going
  to do that.
854: Then like politely explaining to people that you're never going to do that.
858: And letting them know and just closing the feature request immediately, in my
  opinion,
862: is kind of the kindest way of doing that.
864: On Homebrew, we take that a step further where we say, basically, unless any
  of the active
868: maintainers plan on working on this, then we close the feature request out and
  we say to
873: people, okay, we will or won't accept a pull request that implements this functionality,
  but
878: we're not, for the sake of our issue tracker, we're not going to leave this open
  indefinitely,
881: because this isn't something we're actively pursuing.
883: So, the kind of third group of users, we'll do questions at the end if that's
  alright, thank
891: you very much.
892: The third group of users are your quiet users.
898: So this is probably the majority of people who use your project, right?
901: So with Homebrew, I only meet these people when I'm at like a conference like
  this and I
907: go and say to someone like, oh hey, like, do you use Homebrew, do you like Homebrew,
  whatever,
911: and they're like, oh yeah, yeah, I know, I really like Homebrew and stuff.
914: And a lot of the time, the majority of the time, those people have never, they
  don't follow
918: our Twitter account, they're not, you know, they're not posting or reading GitHub
  issues,
923: they're not on our mailing list, whatever.
924: So their only interaction with the software, as I said before, is actually using
  it.
928: So, and I found kind of myself, when I talk to those people, they have very,
  very different
933: views of what the problems are in your software compared to the vocal users.
937: So, an example with Homebrew, you know, we have people who, we have like strange
  options
942: that allow you to kind of maybe configure Homebrew to behave in radically different
  ways.
946: And a lot of our vocal issues get upset where we kind of break those strange
  corner cases.
951: Whereas what our quiet users get concerned about is things like in Homebrew,
  we use a lot
956: of like crazy terminology, like when you install a package, that's a formula
  and it gets installed
961: into a keg and things like that.
963: And that's not obvious to a lot of people what that stuff means.
967: And when you propose changing it, maintainers and vocal users are often like,
  no, we love
971: this, we think it's great, this needs to stay the way it is.
974: Then every time I come to a conference, I get five people who say to me, oh,
  you work on
978: Homebrew, it's great.
979: But like, what is a keg?
980: I understand like, this is so confusing.
982: So I think this is a thing that is common with software development in general,
  that it's
987: kind of hard often to try and solicit the people who are actually using your
  software compared
992: to the people who just want to talk about it.
994: But I still think that it's kind of, I'm going to break down into three little
  things that
998: you can do to focus on like what broadly these users tend to want.
1003: First one is high quality, like most of the time, most of your users care about
  your software
1008: working well.
1011: In open source, something which I think separates people's opinion quite strongly,
  but I come
1017: quite heavily down on one side of, is are you better to have, you know, 100
  features which
1023: work 50% of the time, or are you better to have, you know, 10 features that
  work 100% of
1028: the time?
1029: And I'm definitely in the category that you're better to have fewer features
  that work well
1032: than loads of features, all of which are kind of a bit flaky and don't necessarily
  work
1037: as well as they should.
1039: So I think if you have a project that you focus on being high quality, that
  will make
1043: your users happy and it will make you get more and more users.
1047: Whereas if you let that quality drop, eventually you'll be replaced by another
  project which
1050: has focused on quality.
1053: Another one, and this is something that's affected me personally, as a maintainer
  I think it's very
1057: important, particularly to your quiet users, to not allow yourself to merge
  things out of
1061: guilt.
1062: There's a particular situation in the homebrew where someone worked really,
  really hard on
1066: solving a problem a few people had requested, and their implementation was not
  great.
1071: Like, I kept sort of making suggestions for changes they should make and stuff
  like that,
1076: and they made all the changes and things like that, but the underlying design
  was just poor.
1080: And I tried to suggest that to them, but they don't seem to kind of really get
  it.
1083: And in the end I ended up merging this feature, despite the fact that I kind
  of knew it wasn't
1089: high enough quality, because the person had put so much effort into it that
  I felt bad rejecting
1093: their pull request.
1094: And that's something that still causes kind of grief to this day, is the fact
  that we
1098: kind of merged this feature prematurely, rather than kind of waiting for a better
  implementation.
1104: So, and the last one is, I would say, and this is a bit contentious, but no
  v2.0.
1110: Again, a really common thing with software is you get, like, you know, you have
  all the stuff
1115: when you're writing your project that is annoying, various little, like, legacy
  issues and stuff
1120: like that, and it's nice to think, ah, you know, I just wish I could throw all
  the code
1123: away, start again, and then it will be all clean and great the next time around.
1127: And that almost always kills projects, because when you do that, you end up
  getting rid of
1134: all the bugs that you know, and all the bugs that you fixed, and replacing them
  all with
1137: the bugs that you didn't know, and all these new bugs.
1140: And then you break everything, and you have features that your users relied
  on, which you
1144: haven't got around to implementing yet, and stuff like that.
1147: So I think, I think it's a valuable thing to try and iterate.
1151: Obviously you can have a v2.0, that's a slightly silly example, but trying to
  focus on backwards
1157: compatibility, trying to focus on maintaining features, and trying to focus
  on improving
1162: quality and improving the stuff that your software supports and does over time,
  and resisting
1168: the temptation to throw everything away and start again.
1171: a lot more fun, but it sucks for your users.
1175: Right, so, little overview.
1177: We talked about the three groups of people.
1180: We talked about the sizes of projects.
1181: This stuff is probably most relevant when your project is medium or large size,
  if you have,
1186: kind of, starting to get more than you just working on it.
1189: And once you start having, like, tens of maintainers, hundreds or thousands
  of users, this stuff gets
1194: a bit more interesting.
1195: But, I think the main things I would say to remember is try and separate your
  users when
1201: you think about these things into maintainers, vocal users, and quiet users,
  and think about
1206: how changes you're making on your project affect each of those groups.
1209: And if you do so, I think you'll have a much more successful open source project.
1213: Thank you very much.
1215: Does anyone have any questions?
1216: Yeah, I have one.
1220: Thank you very much for sharing the perspective.
1223: And my question is, like, one particular point you should mention is what, like,
  the easiest way
1229: to deal with kind of growth growing is to close things early, and sometimes
  don't hesitate to have a,
1236: as far as I understood, but hesitate to have a grief of closing things that
  we've worked on,
1242: in case they didn't get the design right or something like that.
1245: So, doesn't this perspective hurt the potential maintainer's tool?
1250: Because, like, I'm not sure how many people have that experience, but, like,
  I saw people being rejected
1257: on their first pull request ever, and it was to homebrew.
1260: Yeah.
1261: It was discouraging them.
1262: Yeah.
1263: Yeah, that's a really good point.
1270: To repeat it in case anyone didn't hear, there was asked about, basically, correct
  me if my
1275: summarization is wrong, that is there not a tension between saying you should
  kind of close pull requests
1280: early, close issues early, and people's maybe first contribution to a project
  like homebrew being
1285: something that gets closed immediately?
1287: And does that not cause problems for the community?
1289: And I think that's a really good question.
1291: I think it's definitely tricky to play, and I think the way to do that is about
  how you close things.
1299: And I think particularly in homebrew, and particularly myself as an individual,
  I've got a lot better at
1303: doing that, about making sure when you close things that you say to people,
  okay, like,
1308: this is what, like, this is why we can't accept this, we're really sorry, and
  try and explain to
1313: them why and saying, but, you know, there's maybe something in here that you
  can do which will help
1317: And also trying to, if people have mistakes that are correctable, trying to
  kind of get them to a point
1323: where, you know, lots of review, lots of feedback to help people get to that
  point.
1327: But as if you close an issue and just say RTFM noob or whatever, like, then
  that's when people get
1333: discouraged and they leave and they don't want to work on the project anymore.
1336: But yeah, no, great point.
1337: Just to follow up, did you ever have experience of people being pissed off by
  that until the point you
1345: escalated to pointing to the code of conduct, and that saying you stopped, you
  cannot complain
1353: of that anymore or email, and do you have experience of that?
1355: So the question was if you ever have people who get annoyed by that and then
  have to be
1360: pointed to the code of conduct because they've kind of been upset by the process.
1363: Yeah, that happens, that happens sometimes. And like, generally, there's a positive
  outcome of
1369: that. But yeah, there's, you know, probably once a year, probably no more than
  once a year,
1373: we have someone who makes a pull request, it gets rejected for whatever reason,
  and they flip out,
1378: and they need to get basically blocked on the project. Because, I mean,
1381: sometimes that, like, it literally gets to the point where people will, like,
  follow you on Twitter,
1386: abuse maintainers on Twitter, all this type of stuff, just because they're upset,
  a pull request
1390: didn't get merged. And I think, like, you know, that's clearly unacceptable
  behavior, no matter the
1395: quality of their pull request. Like, if you start doing stuff like that, our
  attitudes, we will just
1400: close your pull request, regardless. So, any other questions? Yep.
1404: I once read this blog post called the pull request hack, where you give commit
  access to the person who
1412: opens a pull request. I mean, it works in the cases where you're not interested
  in working on your project
1419: anymore, and you're looking for maintainers for it. So, you just give commit
  access to anybody who opens a pull request,
1426: and they've done the right thing. But, I mean, I find it a bit odd, and what
  are your thoughts on that?
1434: Yeah. So, the question was about, like, there's kind of this blog post about
  the pull request hack,
1440: that's basically, like, if anyone makes a pull request to your project, you
  merge it. After you merge the
1444: pull request, you just immediately give them commit access to your project.
  And I think for, yeah, for small
1449: projects, I think that can work really well, particularly on projects you don't
  want to maintain anymore. And I've done that,
1454: kind of, that approach online. I've probably done it after three or four pull
  requests rather than just one.
1459: But, yeah, but I think it's, when you get bigger projects, like Homebrew, for
  example, like, if we took that
1464: model, like, the quality would just go, like, very quickly. So, yeah, it's a
  balance, but an interesting one.
1470: One more question? Anyone?
1473: Do you think there's a difference between company-managed open source projects
  versus community-managed?
1482: Yeah, that's a good question. And hopefully, I'm going to try and say this with
  my Homebrew hat on,
1488: rather than my GitHub hat on. But yeah, the question was if there's a difference
  between
1491: company-managed and community-managed open source projects. I think a big criticism
  that I've had,
1497: even internally at GitHub, and we talk about this fairly publicly, is that you
  need to be really
1502: careful with company-managed ones to be clear, almost like what I said about
  closing feature requests.
1507: So if your company knows this is the direction this project's going to take,
  and effectively,
1512: we're releasing the code in the open, but people in the community don't get
  to decide the direction
1516: of this project, then you should be, like, super explicit about that. You should
  close pull requests
1520: early. You should close feature requests early. You should add to your README
  to make sure that you
1524: clarify that, like, you know, this is the way we're doing things. You know,
  if you want to work on
1529: this project, apply for a job with this company. And I think that's a more honest
  way of doing things.
1534: And I think on the community side of things, I personally, where I found that
  it's kind of
1539: interesting is where the two overlap. The people I found the most, I work on
  Homebrew entirely in my
1543: free time. Well, pretty much, unless someone at GitHub screams that something
  needs fixed.
1547: But yeah, so when it gets awkward is when I interact with someone who runs a
  company-sponsored
1554: open source project, who's been told, you need to get your project into Homebrew
  by Friday,
1559: you know, for your performance review to be good this year. And then when we're
  not as quick as they
1563: like us to be, they start shouting and screaming. And that's someone who's,
  you know, being paid to
1568: contribute to Homebrew. And the maintainers on Homebrew have never been paid
  for anything. And so,
1573: yeah, there's definitely tensions there. And I think it's something that we'll
  see more about in
1578: future. But I think some of it is just companies learning how to do open source
  better and learning how to
1583: interact better with the community. But yeah, great question. Thank you so much.
  Yeah. Thank you
1586: everyone for coming. All right.
